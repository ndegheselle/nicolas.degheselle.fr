---
import { useTranslations } from "@i18n/utils";
import BlankLayout from "@layouts/BlankLayout.astro";

import { languages } from "@i18n/ui";

export async function getStaticPaths() {
    return Object.keys(languages).map((lang) => ({ params: { lang } }));
}

function customStringify(obj, indent = 2) {
    const space = " ".repeat(indent);

    function stringifyValue(value, currentIndent) {
        if (Array.isArray(value)) {
            if (
                value.every((item) => typeof item === "object" && item !== null)
            ) {
                // Array contains objects
                return `[\n${value.map((item) => `${space.repeat(currentIndent + 1)}${stringifyValue(item, currentIndent + 1)}`).join(`, \n`)}\n${space.repeat(currentIndent)}]`;
            } else {
                // Array contains strings or other types
                const inlineString = `[${value.map((item) => stringifyValue(item, currentIndent)).join(", ")}]`;
                if (inlineString.length < 80) {
                    return inlineString;
                } else {
                    return `[\n${value.map((item) => `${space.repeat(currentIndent + 1)}${stringifyValue(item, currentIndent + 1)}`).join(`, \n`)}\n${space.repeat(currentIndent)}]`;
                }
            }
        } else if (typeof value === "object" && value !== null) {
            // Object
            return `{\n${Object.entries(value)
                .map(
                    ([key, val]) =>
                        `${space.repeat(currentIndent + 1)}"${key}": ${stringifyValue(val, currentIndent + 1)}`,
                )
                .join(`, \n`)}\n${space.repeat(currentIndent)}}`;
        } else {
            // Primitive value
            return JSON.stringify(value);
        }
    }

    return stringifyValue(obj, 0);
}

const { lang } = Astro.params;
const cv = await import(`../../../data/${lang}/cv.json`);
const t = useTranslations(lang);
const json = customStringify(cv);
---

<BlankLayout title="CV - Nicolas De Gheselle">
    <a slot="side-menu" href="print">
        <i class="fa-solid fa-print"></i>
    </a>
    <a slot="side-menu" href="json">
        <i class="fa-solid fa-code"></i>
    </a>
    <a slot="side-menu" href="text">
        <i class="fa-regular fa-file-lines"></i>
    </a>
    <div class="container page">
        <code>{json}</code>
    </div>
</BlankLayout>

<style>
    .page {
        padding: 0.4rem;
        overflow-x: auto;
    }

    code {
        white-space: pre;
        word-wrap: break-word; /* Ensures long words are broken */
    }
</style>
